// tslint:disable-next-line:no-any
export function isNil(obj) {
    return obj === undefined || obj === null;
}
// tslint:disable-next-line:no-any
export function isPresent(obj) {
    return !isNil(obj);
}
// tslint:disable-next-line:no-any
export function isString(obj) {
    return typeof obj === 'string';
}
// noinspection JSUnusedGlobalSymbols
// tslint:disable-next-line:no-any
export function isEmpty(value) {
    if (isNil(value)) {
        return true;
    }
    if (value === {}) {
        return true;
    }
    if (Array.isArray(value) && value.length === 0) {
        return true;
    }
    if (typeof value !== 'boolean' && !value) {
        return true;
    }
    // noinspection RedundantIfStatementJS
    if (Object.keys(value).length === 0 && value.constructor === Object) {
        return true;
    }
    return false;
}
export function mergeOptions(oldOptions, newOptions) {
    if (!newOptions) {
        return oldOptions;
    }
    return {
        path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,
        domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,
        expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,
        secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,
        sameSite: isPresent(newOptions.sameSite) ? newOptions.sameSite : oldOptions.sameSite,
        httpOnly: isPresent(newOptions.httpOnly) ? newOptions.httpOnly : oldOptions.httpOnly,
        storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded
    };
}
export function parseCookieString(currentCookieString) {
    let lastCookies = {};
    let lastCookieString = '';
    let cookieArray;
    let cookie;
    let i;
    let index;
    let name;
    if (currentCookieString !== lastCookieString) {
        lastCookieString = currentCookieString;
        cookieArray = lastCookieString.split('; ');
        lastCookies = {};
        for (i = 0; i < cookieArray.length; i++) {
            cookie = cookieArray[i];
            index = cookie.indexOf('=');
            if (index > 0) { // ignore nameless cookies
                name = safeDecodeURIComponent(cookie.substring(0, index));
                // the first value that is seen for a cookie is the most
                // specific one.  values for the same cookie name that
                // follow are for less specific paths.
                if (isNil((lastCookies)[name])) {
                    lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
                }
            }
        }
    }
    return lastCookies;
}
export function buildCookieString(name, value, options) {
    let expires = options === null || options === void 0 ? void 0 : options.expires;
    let val;
    if (isNil(value)) {
        expires = 'Thu, 01 Jan 1970 00:00:00 GMT';
        val = '';
    }
    else {
        val = value;
    }
    if (isString(expires)) {
        expires = new Date(expires);
    }
    const cookieValue = (options === null || options === void 0 ? void 0 : options.storeUnencoded) ? value : encodeURIComponent(val);
    let str = encodeURIComponent(name) + '=' + cookieValue;
    str += (options === null || options === void 0 ? void 0 : options.path) ? ';path=' + options.path : '';
    str += (options === null || options === void 0 ? void 0 : options.domain) ? ';domain=' + options.domain : '';
    str += expires ? ';expires=' + expires.toUTCString() : '';
    str += (options === null || options === void 0 ? void 0 : options.sameSite) ? '; SameSite=' + options.sameSite : '';
    str += (options === null || options === void 0 ? void 0 : options.secure) ? ';secure' : '';
    str += (options === null || options === void 0 ? void 0 : options.httpOnly) ? '; HttpOnly' : '';
    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
    // - 300 cookies
    // - 20 cookies per unique domain
    // - 4096 bytes per cookie
    const cookieLength = str.length + 1;
    if (cookieLength > 4096) {
        console.log(`Cookie \'${name}\' possibly not set or overflowed because it was too large (${cookieLength} > 4096 bytes)!`);
    }
    return str;
}
export function safeDecodeURIComponent(str) {
    try {
        return decodeURIComponent(str);
    }
    catch (e) {
        return str;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2hva3V0bzEwMHJldHN1a2VuL3NyYy9naXRodWIuY29tL2hva3V0bzEwMHJldHN1a2VuL25neC1jb29raWUvcHJvamVjdHMvbmd4LWNvb2tpZS9zcmMvIiwic291cmNlcyI6WyJsaWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsa0NBQWtDO0FBQ2xDLE1BQU0sVUFBVSxLQUFLLENBQUMsR0FBUTtJQUM1QixPQUFPLEdBQUcsS0FBSyxTQUFTLElBQUksR0FBRyxLQUFLLElBQUksQ0FBQztBQUMzQyxDQUFDO0FBRUQsa0NBQWtDO0FBQ2xDLE1BQU0sVUFBVSxTQUFTLENBQUMsR0FBUTtJQUNoQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLENBQUM7QUFFRCxrQ0FBa0M7QUFDbEMsTUFBTSxVQUFVLFFBQVEsQ0FBQyxHQUFRO0lBQy9CLE9BQU8sT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDO0FBQ2pDLENBQUM7QUFFRCxxQ0FBcUM7QUFDckMsa0NBQWtDO0FBQ2xDLE1BQU0sVUFBVSxPQUFPLENBQUMsS0FBVTtJQUNoQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFDRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDOUMsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELElBQUksT0FBTyxLQUFLLEtBQUssU0FBUyxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ3hDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFDRCxzQ0FBc0M7SUFDdEMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sS0FBSyxD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LEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzFELEdBQUcsSUFBSSxDQUFBLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxRQUFRLEVBQUMsQ0FBQyxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDakUsR0FBRyxJQUFJLENBQUEsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLE1BQU0sRUFBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDeEMsR0FBRyxJQUFJLENBQUEsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLFFBQVEsRUFBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFN0MseUVBQXlFO0lBQ3pFLGdCQUFnQjtJQUNoQixpQ0FBaUM7SUFDakMsMEJBQTBCO0lBQzFCLE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLElBQUksWUFBWSxHQUFHLElBQUksRUFBRTtRQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSwrREFBK0QsWUFBWSxpQkFBaUIsQ0FBQyxDQUFDO0tBQzNIO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQsTUFBTSxVQUFVLHNCQUFzQixDQUFDLEdBQVc7SUFDaEQsSUFBSTtRQUNGLE9BQU8sa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDaEM7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sR0FBRyxDQUFDO0tBQ1o7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29va2llRGljdCwgQ29va2llT3B0aW9ucyB9IGZyb20gJy4vY29va2llLm1vZGVsJztcblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuZXhwb3J0IGZ1bmN0aW9uIGlzTmlsKG9iajogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiBvYmogPT09IHVuZGVmaW5lZCB8fCBvYmogPT09IG51bGw7XG59XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbmV4cG9ydCBmdW5jdGlvbiBpc1ByZXNlbnQob2JqOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuICFpc05pbChvYmopO1xufVxuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcob2JqOiBhbnkpOiBvYmogaXMgc3RyaW5nIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdzdHJpbmcnO1xufVxuXG4vLyBub2luc3BlY3Rpb24gSlNVbnVzZWRHbG9iYWxTeW1ib2xzXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gIGlmIChpc05pbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT09IHt9KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJyAmJiAhdmFsdWUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBub2luc3BlY3Rpb24gUmVkdW5kYW50SWZTdGF0ZW1lbnRKU1xuICBpZiAoT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMCAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VPcHRpb25zKG9sZE9wdGlvbnM6IENvb2tpZU9wdGlvbnMsIG5ld09wdGlvbnM/OiBDb29raWVPcHRpb25zKTogQ29va2llT3B0aW9ucyB7XG4gIGlmICghbmV3T3B0aW9ucykge1xuICAgIHJldHVybiBvbGRPcHRpb25zO1xuICB9XG4gIHJldHVybiB7XG4gICAgcGF0aDogaXNQcmVzZW50KG5ld09wdGlvbnMucGF0aCkgPyBuZXdPcHRpb25zLnBhdGggOiBvbGRPcHRpb25zLnBhdGgsXG4gICAgZG9tYWluOiBpc1ByZXNlbnQobmV3T3B0aW9ucy5kb21haW4pID8gbmV3T3B0aW9ucy5kb21haW4gOiBvbGRPcHRpb25zLmRvbWFpbixcbiAgICBleHBpcmVzOiBpc1ByZXNlbnQobmV3T3B0aW9ucy5leHBpcmVzKSA/IG5ld09wdGlvbnMuZXhwaXJlcyA6IG9sZE9wdGlvbnMuZXhwaXJlcyxcbiAgICBzZWN1cmU6IGlzUHJlc2VudChuZXdPcHRpb25zLnNlY3VyZSkgPyBuZXdPcHRpb25zLnNlY3VyZSA6IG9sZE9wdGlvbnMuc2VjdXJlLFxuICAgIHNhbWVTaXRlOiBpc1ByZXNlbnQobmV3T3B0aW9ucy5zYW1lU2l0ZSkgPyBuZXdPcHRpb25zLnNhbWVTaXRlIDogb2xkT3B0aW9ucy5zYW1lU2l0ZSxcbiAgICBodHRwT25seTogaXNQcmVzZW50KG5ld09wdGlvbnMuaHR0cE9ubHkpID8gbmV3T3B0aW9ucy5odHRwT25seSA6IG9sZE9wdGlvbnMuaHR0cE9ubHksXG4gICAgc3RvcmVVbmVuY29kZWQ6IGlzUHJlc2VudChuZXdPcHRpb25zLnN0b3JlVW5lbmNvZGVkKSA/IG5ld09wdGlvbnMuc3RvcmVVbmVuY29kZWQgOiBvbGRPcHRpb25zLnN0b3JlVW5lbmNvZGVkXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNvb2tpZVN0cmluZyhjdXJyZW50Q29va2llU3RyaW5nOiBzdHJpbmcpOiBDb29raWVEaWN0IHtcbiAgbGV0IGxhc3RDb29raWVzOiBDb29raWVEaWN0ID0ge307XG4gIGxldCBsYXN0Q29va2llU3RyaW5nID0gJyc7XG4gIGxldCBjb29raWVBcnJheTogc3RyaW5nW107XG4gIGxldCBjb29raWU6IHN0cmluZztcbiAgbGV0IGk6IG51bWJlcjtcbiAgbGV0IGluZGV4OiBudW1iZXI7XG4gIGxldCBuYW1lOiBzdHJpbmc7XG4gIGlmIChjdXJyZW50Q29va2llU3RyaW5nICE9PSBsYXN0Q29va2llU3RyaW5nKSB7XG4gICAgbGFzdENvb2tpZVN0cmluZyA9IGN1cnJlbnRDb29raWVTdHJpbmc7XG4gICAgY29va2llQXJyYXkgPSBsYXN0Q29va2llU3RyaW5nLnNwbGl0KCc7ICcpO1xuICAgIGxhc3RDb29raWVzID0ge307XG4gICAgZm9yIChpID0gMDsgaSA8IGNvb2tpZUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb29raWUgPSBjb29raWVBcnJheVtpXTtcbiAgICAgIGluZGV4ID0gY29va2llLmluZGV4T2YoJz0nKTtcbiAgICAgIGlmIChpbmRleCA+IDApIHsgIC8vIGlnbm9yZSBuYW1lbGVzcyBjb29raWVzXG4gICAgICAgIG5hbWUgPSBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcoMCwgaW5kZXgpKTtcbiAgICAgICAgLy8gdGhlIGZpcnN0IHZhbHVlIHRoYXQgaXMgc2VlbiBmb3IgYSBjb29raWUgaXMgdGhlIG1vc3RcbiAgICAgICAgLy8gc3BlY2lmaWMgb25lLiAgdmFsdWVzIGZvciB0aGUgc2FtZSBjb29raWUgbmFtZSB0aGF0XG4gICAgICAgIC8vIGZvbGxvdyBhcmUgZm9yIGxlc3Mgc3BlY2lmaWMgcGF0aHMuXG4gICAgICAgIGlmIChpc05pbCgobGFzdENvb2tpZXMpW25hbWVdKSkge1xuICAgICAgICAgIGxhc3RDb29raWVzW25hbWVdID0gc2FmZURlY29kZVVSSUNvbXBvbmVudChjb29raWUuc3Vic3RyaW5nKGluZGV4ICsgMSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBsYXN0Q29va2llcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkQ29va2llU3RyaW5nKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCwgb3B0aW9ucz86IENvb2tpZU9wdGlvbnMpOiBzdHJpbmcge1xuICBsZXQgZXhwaXJlczogc3RyaW5nIHwgRGF0ZSB8IHVuZGVmaW5lZCA9IG9wdGlvbnM/LmV4cGlyZXM7XG4gIGxldCB2YWw6IHN0cmluZztcbiAgaWYgKGlzTmlsKHZhbHVlKSkge1xuICAgIGV4cGlyZXMgPSAnVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQnO1xuICAgIHZhbCA9ICcnO1xuICB9IGVsc2Uge1xuICAgIHZhbCA9IHZhbHVlIGFzIHN0cmluZztcbiAgfVxuICBpZiAoaXNTdHJpbmcoZXhwaXJlcykpIHtcbiAgICBleHBpcmVzID0gbmV3IERhdGUoZXhwaXJlcyk7XG4gIH1cbiAgY29uc3QgY29va2llVmFsdWUgPSBvcHRpb25zPy5zdG9yZVVuZW5jb2RlZCA/IHZhbHVlIDogZW5jb2RlVVJJQ29tcG9uZW50KHZhbCk7XG4gIGxldCBzdHIgPSBlbmNvZGVVUklDb21wb25lbnQobmFtZSkgKyAnPScgKyBjb29raWVWYWx1ZTtcbiAgc3RyICs9IG9wdGlvbnM/LnBhdGggPyAnO3BhdGg9JyArIG9wdGlvbnMucGF0aCA6ICcnO1xuICBzdHIgKz0gb3B0aW9ucz8uZG9tYWluID8gJztkb21haW49JyArIG9wdGlvbnMuZG9tYWluIDogJyc7XG4gIHN0ciArPSBleHBpcmVzID8gJztleHBpcmVzPScgKyBleHBpcmVzLnRvVVRDU3RyaW5nKCkgOiAnJztcbiAgc3RyICs9IG9wdGlvbnM/LnNhbWVTaXRlID8gJzsgU2FtZVNpdGU9JyArIG9wdGlvbnMuc2FtZVNpdGUgOiAnJztcbiAgc3RyICs9IG9wdGlvbnM/LnNlY3VyZSA/ICc7c2VjdXJlJyA6ICcnO1xuICBzdHIgKz0gb3B0aW9ucz8uaHR0cE9ubHkgPyAnOyBIdHRwT25seScgOiAnJztcblxuICAvLyBwZXIgaHR0cDovL3d3dy5pZXRmLm9yZy9yZmMvcmZjMjEwOS50eHQgYnJvd3NlciBtdXN0IGFsbG93IGF0IG1pbmltdW06XG4gIC8vIC0gMzAwIGNvb2tpZXNcbiAgLy8gLSAyMCBjb29raWVzIHBlciB1bmlxdWUgZG9tYWluXG4gIC8vIC0gNDA5NiBieXRlcyBwZXIgY29va2llXG4gIGNvbnN0IGNvb2tpZUxlbmd0aCA9IHN0ci5sZW5ndGggKyAxO1xuICBpZiAoY29va2llTGVuZ3RoID4gNDA5Nikge1xuICAgIGNvbnNvbGUubG9nKGBDb29raWUgXFwnJHtuYW1lfVxcJyBwb3NzaWJseSBub3Qgc2V0IG9yIG92ZXJmbG93ZWQgYmVjYXVzZSBpdCB3YXMgdG9vIGxhcmdlICgke2Nvb2tpZUxlbmd0aH0gPiA0MDk2IGJ5dGVzKSFgKTtcbiAgfVxuICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FmZURlY29kZVVSSUNvbXBvbmVudChzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuIl19