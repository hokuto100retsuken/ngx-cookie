import { Inject, Injectable, Optional } from '@angular/core';
import { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';
import { isEmpty, isNil, isString } from 'ngx-cookie';
const COOKIE_SEPARATOR = '; ';
export class CookieBackendWriterService {
    constructor(request, response) {
        this.request = request;
        this.response = response;
    }
    readAllAsString() {
        var _a, _b;
        const requestHeadersCookies = (_b = (_a = this.request) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b.cookie;
        const cookiesFromRequest = requestHeadersCookies ? requestHeadersCookies.split(COOKIE_SEPARATOR) : [];
        const addedCookies = this.getNormalizedResponseCookies();
        const allCookies = this.latestUniqueCookieValues(cookiesFromRequest, addedCookies);
        return allCookies.join(COOKIE_SEPARATOR);
    }
    getNormalizedResponseCookies() {
        var _a;
        const responseCookies = (_a = this.response.getHeader('Set-Cookie')) !== null && _a !== void 0 ? _a : '';
        const addedCookies = Array.isArray(responseCookies) ? responseCookies : [responseCookies];
        return addedCookies.map(cookieEntry => cookieEntry.split('; ')[0]);
    }
    latestUniqueCookieValues(oldCookies, newerCookies) {
        const cookiesMap = new Map();
        const oldAndNewCookies = [...oldCookies, ...newerCookies];
        oldAndNewCookies
            .filter(value => value)
            .map(cookie => cookie.split('='))
            .forEach(([key, value]) => cookiesMap.set(key, value));
        const result = [];
        cookiesMap.forEach((value, key) => result.push(`${key}=${value}`));
        return result;
    }
    write(name, value, options) {
        if (!isNil(this.response)) {
            this.response.cookie(name, value, this.getOptions(options));
        }
    }
    getOptions(options) {
        if (isEmpty(options)) {
            return {};
        }
        return {
            expires: this.getExpires(options === null || options === void 0 ? void 0 : options.expires),
            httpOnly: options === null || options === void 0 ? void 0 : options.httpOnly,
            path: options === null || options === void 0 ? void 0 : options.path,
            domain: options === null || options === void 0 ? void 0 : options.domain,
            secure: options === null || options === void 0 ? void 0 : options.secure,
            sameSite: options === null || options === void 0 ? void 0 : options.sameSite
        };
    }
    getExpires(expires) {
        if (isEmpty(expires)) {
            return undefined;
        }
        return isString(expires) ? new Date(expires) : expires;
    }
}
CookieBackendWriterService.decorators = [
    { type: Injectable }
];
CookieBackendWriterService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [REQUEST,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [RESPONSE,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLWJhY2tlbmQtd3JpdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2hva3V0bzEwMHJldHN1a2VuL3NyYy9naXRodWIuY29tL2hva3V0bzEwMHJldHN1a2VuL25neC1jb29raWUvcHJvamVjdHMvbmd4LWNvb2tpZS1iYWNrZW5kL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9jb29raWUtYmFja2VuZC13cml0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUV2RSxPQUFPLEVBQXVDLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRTNGLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO0FBRzlCLE1BQU0sT0FBTywwQkFBMEI7SUFDckMsWUFBaUQsT0FBZ0IsRUFDZixRQUFrQjtRQURuQixZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2YsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUFHLENBQUM7SUFFeEUsZUFBZTs7UUFDYixNQUFNLHFCQUFxQixlQUFHLElBQUksQ0FBQyxPQUFPLDBDQUFFLE9BQU8sMENBQUUsTUFBTSxDQUFDO1FBQzVELE1BQU0sa0JBQWtCLEdBQWEscUJBQXFCLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDaEgsTUFBTSxZQUFZLEdBQWEsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7UUFDbkUsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ25GLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxnQkFB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LFFBQVEsWUFBSSxNQUFNLFNBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJFUVVFU1QsIFJFU1BPTlNFIH0gZnJvbSAnQG5ndW5pdmVyc2FsL2V4cHJlc3MtZW5naW5lL3Rva2Vucyc7XG5pbXBvcnQgeyBDb29raWVPcHRpb25zIGFzIEV4cHJlc3NDb29raWVPcHRpb25zLCBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgQ29va2llT3B0aW9ucywgSUNvb2tpZVdyaXRlclNlcnZpY2UsIGlzRW1wdHksIGlzTmlsLCBpc1N0cmluZyB9IGZyb20gJ25neC1jb29raWUnO1xuXG5jb25zdCBDT09LSUVfU0VQQVJBVE9SID0gJzsgJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvb2tpZUJhY2tlbmRXcml0ZXJTZXJ2aWNlIGltcGxlbWVudHMgSUNvb2tpZVdyaXRlclNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KFJFUVVFU1QpIHByaXZhdGUgcmVxdWVzdDogUmVxdWVzdCxcbiAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChSRVNQT05TRSkgcHJpdmF0ZSByZXNwb25zZTogUmVzcG9uc2UpIHt9XG5cbiAgcmVhZEFsbEFzU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgY29uc3QgcmVxdWVzdEhlYWRlcnNDb29raWVzID0gdGhpcy5yZXF1ZXN0Py5oZWFkZXJzPy5jb29raWU7XG4gICAgY29uc3QgY29va2llc0Zyb21SZXF1ZXN0OiBzdHJpbmdbXSA9IHJlcXVlc3RIZWFkZXJzQ29va2llcyA/IHJlcXVlc3RIZWFkZXJzQ29va2llcy5zcGxpdChDT09LSUVfU0VQQVJBVE9SKSA6IFtdO1xuICAgIGNvbnN0IGFkZGVkQ29va2llczogc3RyaW5nW10gPSB0aGlzLmdldE5vcm1hbGl6ZWRSZXNwb25zZUNvb2tpZXMoKTtcbiAgICBjb25zdCBhbGxDb29raWVzID0gdGhpcy5sYXRlc3RVbmlxdWVDb29raWVWYWx1ZXMoY29va2llc0Zyb21SZXF1ZXN0LCBhZGRlZENvb2tpZXMpO1xuICAgIHJldHVybiBhbGxDb29raWVzLmpvaW4oQ09PS0lFX1NFUEFSQVRPUik7XG4gIH1cblxuICBwcml2YXRlIGdldE5vcm1hbGl6ZWRSZXNwb25zZUNvb2tpZXMoKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHJlc3BvbnNlQ29va2llcyA9ICh0aGlzLnJlc3BvbnNlLmdldEhlYWRlcignU2V0LUNvb2tpZScpIGFzIHN0cmluZyB8IHN0cmluZ1tdKSA/PyAnJztcbiAgICBjb25zdCBhZGRlZENvb2tpZXM6IHN0cmluZ1tdID0gQXJyYXkuaXNBcnJheShyZXNwb25zZUNvb2tpZXMpID8gcmVzcG9uc2VDb29raWVzIDogW3Jlc3BvbnNlQ29va2llc107XG4gICAgcmV0dXJuIGFkZGVkQ29va2llcy5tYXAoY29va2llRW50cnkgPT4gY29va2llRW50cnkuc3BsaXQoJzsgJylbMF0pO1xuICB9XG5cbiAgcHJpdmF0ZSBsYXRlc3RVbmlxdWVDb29raWVWYWx1ZXMob2xkQ29va2llczogc3RyaW5nW10sIG5ld2VyQ29va2llczogc3RyaW5nW10pOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgY29va2llc01hcCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG4gICAgY29uc3Qgb2xkQW5kTmV3Q29va2llczogc3RyaW5nW10gPSBbLi4ub2xkQ29va2llcywgLi4ubmV3ZXJDb29raWVzXTtcbiAgICBvbGRBbmROZXdDb29raWVzXG4gICAgICAuZmlsdGVyKHZhbHVlID0+IHZhbHVlKVxuICAgICAgLm1hcChjb29raWUgPT4gY29va2llLnNwbGl0KCc9JykpXG4gICAgICAuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiBjb29raWVzTWFwLnNldChrZXksIHZhbHVlKSk7XG4gICAgY29uc3QgcmVzdWx0OiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvb2tpZXNNYXAuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gcmVzdWx0LnB1c2goYCR7a2V5fT0ke3ZhbHVlfWApKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgd3JpdGUobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkLCBvcHRpb25zPzogQ29va2llT3B0aW9ucyk6IHZvaWQge1xuICAgIGlmICghaXNOaWwodGhpcy5yZXNwb25zZSkpIHtcbiAgICAgIHRoaXMucmVzcG9uc2UuY29va2llKG5hbWUsIHZhbHVlLCB0aGlzLmdldE9wdGlvbnMob3B0aW9ucykpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0T3B0aW9ucyhvcHRpb25zPzogQ29va2llT3B0aW9ucyk6IEV4cHJlc3NDb29raWVPcHRpb25zIHtcbiAgICBpZiAoaXNFbXB0eShvcHRpb25zKSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgZXhwaXJlczogdGhpcy5nZXRFeHBpcmVzKG9wdGlvbnM/LmV4cGlyZXMpLFxuICAgICAgaHR0cE9ubHk6IG9wdGlvbnM/Lmh0dHBPbmx5LFxuICAgICAgcGF0aDogb3B0aW9ucz8ucGF0aCxcbiAgICAgIGRvbWFpbjogb3B0aW9ucz8uZG9tYWluLFxuICAgICAgc2VjdXJlOiBvcHRpb25zPy5zZWN1cmUsXG4gICAgICBzYW1lU2l0ZTogb3B0aW9ucz8uc2FtZVNpdGVcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRFeHBpcmVzKGV4cGlyZXM/OiBzdHJpbmcgfCBEYXRlKTogRGF0ZSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKGlzRW1wdHkoZXhwaXJlcykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBpc1N0cmluZyhleHBpcmVzKSA/IG5ldyBEYXRlKGV4cGlyZXMgYXMgc3RyaW5nKSA6IChleHBpcmVzIGFzIERhdGUpO1xuICB9XG59XG4iXX0=